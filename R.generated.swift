//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `LandmarkNodePinScene.sks`.
    static let landmarkNodePinSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "LandmarkNodePinScene", pathExtension: "sks")
    /// Resource file `Scene.scn`.
    static let sceneScn = Rswift.FileResource(bundle: R.hostingBundle, name: "Scene", pathExtension: "scn")
    
    /// `bundle.url(forResource: "LandmarkNodePinScene", withExtension: "sks")`
    static func landmarkNodePinSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.landmarkNodePinSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Scene", withExtension: "scn")`
    static func sceneScn(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sceneScn
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `PinArrow`.
    static let pinArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "PinArrow")
    /// Image `PinBox`.
    static let pinBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "PinBox")
    /// Image `buttonring`.
    static let buttonring = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonring")
    /// Image `pinBackground`.
    static let pinBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinBackground")
    /// Image `restartPressed`.
    static let restartPressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "restartPressed")
    /// Image `restart`.
    static let restart = Rswift.ImageResource(bundle: R.hostingBundle, name: "restart")
    
    /// `UIImage(named: "PinArrow", bundle: ..., traitCollection: ...)`
    static func pinArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PinBox", bundle: ..., traitCollection: ...)`
    static func pinBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "buttonring", bundle: ..., traitCollection: ...)`
    static func buttonring(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonring, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pinBackground", bundle: ..., traitCollection: ...)`
    static func pinBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "restart", bundle: ..., traitCollection: ...)`
    static func restart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "restartPressed", bundle: ..., traitCollection: ...)`
    static func restartPressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restartPressed, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainMenuViewController`, and contains static references to 2 segues.
    struct mainMenuViewController {
      /// Segue identifier `LandmarkARViewController`.
      static let landmarkARViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainMenuViewController, LandmarkARViewController> = Rswift.StoryboardSegueIdentifier(identifier: "LandmarkARViewController")
      /// Segue identifier `LandmarkMapViewController`.
      static let landmarkMapViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainMenuViewController, LandmarkMapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "LandmarkMapViewController")
      
      /// Optionally returns a typed version of segue `LandmarkARViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func landmarkARViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainMenuViewController, LandmarkARViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainMenuViewController.landmarkARViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `LandmarkMapViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func landmarkMapViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainMenuViewController, LandmarkMapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainMenuViewController.landmarkMapViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let landmarkARViewController = StoryboardViewControllerResource<LandmarkARViewController>(identifier: "LandmarkARViewController")
      let landmarkMapViewController = StoryboardViewControllerResource<LandmarkMapViewController>(identifier: "LandmarkMapViewController")
      let name = "Main"
      
      func landmarkARViewController(_: Void = ()) -> LandmarkARViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landmarkARViewController)
      }
      
      func landmarkMapViewController(_: Void = ()) -> LandmarkMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landmarkMapViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "buttonring") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'buttonring' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "restart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'restart' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "restartPressed") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'restartPressed' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().landmarkARViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landmarkARViewController' could not be loaded from storyboard 'Main' as 'LandmarkARViewController'.") }
        if _R.storyboard.main().landmarkMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landmarkMapViewController' could not be loaded from storyboard 'Main' as 'LandmarkMapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
